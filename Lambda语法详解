Lambda语法详解
我们在此抽象一下lambda表达式的一般语法：

 
(Type1 param1, Type2 param2, ..., TypeN paramN) -> {
 
  statment1;
 
  statment2;
 
  //.............
 
  return statmentM;
 
}
从lambda表达式的一般语法可以看出来，还是挺符合上面给出的非精确版本的定义–“一段带有输入参数的可执行语句块”。

上面的lambda表达式语法可以认为是最全的版本，写起来还是稍稍有些繁琐。别着急，下面陆续介绍一下lambda表达式的各种简化版：

1. 参数类型省略–绝大多数情况，编译器都可以从上下文环境中推断出lambda表达式的参数类型。这样lambda表达式就变成了：

 
(param1,param2, ..., paramN) -> {
 
  statment1;
 
  statment2;
 
  //.............
 
  return statmentM;
 
}
所以我们最开始的例子就变成了（省略了List的创建）：

 
List<String> lowercaseNames = names.stream().map((name) -> {return name.toLowerCase();}).collect(Collectors.toList());
2. 当lambda表达式的参数个数只有一个，可以省略小括号。lambda表达式简写为：

 
param1 -> {
 
  statment1;
 
  statment2;
 
  //.............
 
  return statmentM;
 
}
所以最开始的例子再次简化为：

 
List<String> lowercaseNames = names.stream().map(name -> {return name.toLowerCase();}).collect(Collectors.toList());
3. 当lambda表达式只包含一条语句时，可以省略大括号、return和语句结尾的分号。lambda表达式简化为：

 
param1 -> statment
所以最开始的例子再次简化为：

 
List<String> lowercaseNames = names.stream().map(name -> name.toLowerCase()).collect(Collectors.toList());
4. 使用Method Reference(具体语法后面介绍)

 
//注意，这段代码在Idea 13.0.2中显示有错误，但是可以正常运行
 
List<String> lowercaseNames = names.stream().map(String::toLowerCase).collect(Collectors.toList());
